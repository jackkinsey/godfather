!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Airport	airport.h	/^class Airport {$/;"	c
AirportInputProcessor	input.h	/^class AirportInputProcessor {$/;"	c
CXX	Makefile	/^CXX = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -g -std=c++11$/;"	m
DynamicArray	array.h	/^template <class T> DynamicArray<T>::DynamicArray(int size) {$/;"	f	class:DynamicArray
DynamicArray	array.h	/^template <class T> class DynamicArray {$/;"	c
EXE	Makefile	/^EXE = godfather$/;"	m
IndexNode	structure.cpp	/^struct IndexNode {$/;"	s	file:
Node	array.h	/^template <class T> struct Node {$/;"	s
Plane	airport.cpp	/^struct Plane {$/;"	s	file:
Timeline	structure.cpp	/^Timeline::Timeline() {$/;"	f	class:Timeline
Timeline	structure.h	/^class Timeline {$/;"	c
_airport	airport.h	6;"	d
_center	structure.h	/^        DynamicArray<struct IndexNode>*  _center; \/\/The central timeline.$/;"	m	class:Timeline
_dynamic	array.h	6;"	d
_first	array.h	/^        struct Node<T>* _first; \/\/Pointer to the eventual physical array space.$/;"	m	class:DynamicArray	typeref:struct:DynamicArray::Node
_input	input.h	6;"	d
_last	array.h	/^        struct Node<T>* _last; \/\/Pointer to the eventual physical array space.$/;"	m	class:DynamicArray	typeref:struct:DynamicArray::Node
_size	array.h	/^        int _size = 0; \/\/How many nodes does the array contain?$/;"	m	class:DynamicArray
_structure	structure.h	6;"	d
addNode	array.h	/^template <class T> struct Node<T>* DynamicArray<T>::addNode(T* datum, struct Node<T>* next, struct Node<T>* prev) {$/;"	f	class:DynamicArray
append	array.h	/^template <class T> struct Node<T>* DynamicArray<T>::append(T* el) {$/;"	f	class:DynamicArray
crash	airport.cpp	/^bool Airport::crash(Plane plane) {$/;"	f	class:Airport
createIndex	structure.cpp	/^struct IndexNode* Timeline::createIndex(int index) {$/;"	f	class:Timeline
data	structure.cpp	/^    DynamicArray<struct Plane>* data;$/;"	m	struct:IndexNode	file:
datum	array.h	/^    T* datum;$/;"	m	struct:Node
depart	airport.cpp	/^bool Airport::depart(Plane plane) {$/;"	f	class:Airport
fetch	structure.cpp	/^struct IndexNode* Timeline::fetch(int depth) {$/;"	f	class:Timeline
fuel	airport.cpp	/^	int fuel;$/;"	m	struct:Plane	file:
getValue	airport.cpp	/^void Airport::getValue(Plane plane) {$/;"	f	class:Airport
grandchildren	airport.cpp	/^	bool grandchildren;$/;"	m	struct:Plane	file:
index	structure.cpp	/^    int index;$/;"	m	struct:IndexNode	file:
init	input.cpp	/^void AirportInputProcessor::init(int numCargo, int numPeople, int fuel, bool grandchildren, int time, Plane plane) {$/;"	f	class:AirportInputProcessor
insert	array.h	/^template <class T> bool DynamicArray<T>::insert(T* el, int loc) {$/;"	f	class:DynamicArray
land	airport.cpp	/^bool Airport::land(Plane plane) {$/;"	f	class:Airport
main	main.cpp	/^int main(int argc, const char * argv[]) {$/;"	f
next	array.h	/^    struct Node<T>* next;$/;"	m	struct:Node	typeref:struct:Node::Node
numCargo	airport.cpp	/^	int numCargo;$/;"	m	struct:Plane	file:
numPeople	airport.cpp	/^	int numPeople;$/;"	m	struct:Plane	file:
numberOfArrivingPlanes	airport.h	/^	int numberOfArrivingPlanes; $/;"	m	class:Airport
numberOfDepartingPlanes	airport.h	/^	int numberOfDepartingPlanes;$/;"	m	class:Airport
parseData	input.cpp	/^void AirportInputProcessor::parseData(string CSV) {$/;"	f	class:AirportInputProcessor
prev	array.h	/^    struct Node<T>* prev;$/;"	m	struct:Node	typeref:struct:Node::Node
process	airport.cpp	/^void Airport::process() {$/;"	f	class:Airport
push	structure.cpp	/^bool Timeline::push(int index, struct Plane& el) {$/;"	f	class:Timeline
readCSV	input.cpp	/^void AirportInputProcessor::readCSV() {$/;"	f	class:AirportInputProcessor
refuel	airport.cpp	/^bool Airport::refuel(Plane plane) {$/;"	f	class:Airport
remove	array.h	/^template <class T> bool DynamicArray<T>::remove(int loc) {$/;"	f	class:DynamicArray
scan	array.h	/^template <class T> struct Node<T>* DynamicArray<T>::scan(int loc) {$/;"	f	class:DynamicArray
size	array.h	/^        int size() { return this._size; };$/;"	f	class:DynamicArray
time	airport.cpp	/^	int time;$/;"	m	struct:Plane	file:
value	airport.cpp	/^	double value;$/;"	m	struct:Plane	file:
~DynamicArray	array.h	/^template <class T> DynamicArray<T>::~DynamicArray() {$/;"	f	class:DynamicArray
~Timeline	structure.cpp	/^Timeline::~Timeline() {$/;"	f	class:Timeline
